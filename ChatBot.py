import spacy
import datetime
import re
import random
import webbrowser
import requests
from textblob import TextBlob
from googletrans import Translator
import locale
locale.setlocale(locale.LC_TIME, 'rus_rus')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
translator = Translator()
API_KEY = "f62350d6ff8c087ec53d1479dab00ade"
nlp = spacy.load("ru_core_news_sm")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
def log_interaction(user_input, bot_response):
    with open("chat_log.txt", "a", encoding="utf-8") as f:
        f.write(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_input}\n–ë–æ—Ç: {bot_response}\n{'='*50}\n")

def lemmatize_text(text):
    doc = nlp(text)
    lemmas = [token.lemma_.lower() for token in doc if not token.is_punct and not token.is_space]
    return " ".join(lemmas)

# –°–ª–æ–≤–∞—Ä—å –∏–Ω—Ç–µ–Ω—Ç–æ–≤
INTENTS = {
    "translate" : {
        "patterns": [
            r"–ø–µ—Ä–µ–≤–µ–¥–∏ ['\"]?(.+?)['\"]? –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π",
            r"–ø–µ—Ä–µ–≤–æ–¥ ['\"]?(.+?)['\"]? –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π",
            r"–∫–∞–∫ –±—É–¥–µ—Ç ['\"]?(.+?)['\"]? –ø–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏"
        ],
        "handler": lambda text: f"–ü–µ—Ä–µ–≤–æ–¥: {translator.translate(text, dest='en').text}"
    },
    "echo" : {
        "patterns": [r"\b—Å–∫–∞–∂–∏\b(.+)", r"–ø–æ–≤—Ç–æ—Ä–∏ (.+)"],
        "handler": lambda text: f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {text}"
    },
    "greeting" : {
        "patterns": [
            r"(?:–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|—Ö–∞–π|\b–¥–æ–±—Ä—ã–π –¥–µ–Ω—å\b|\b–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ\b|\b–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä\b|—Å–∞–ª—é—Ç)",
            r"(?:–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π)[, ]*–±–æ—Ç"
            ],
        "responses": ["–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?", "–ü—Ä–∏–≤–µ—Ç–∏–∫–∏!"]
    },
    "goodbye" : {
        "patterns": [
            r"(?:–ø–æ–∫–∞|–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è|–≤—ã—Ö–æ–¥|–¥–æ –≤—Å—Ç—Ä–µ—á–∏|–ø—Ä–æ—â–∞–π|\b–≤—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ\b|–∑–∞–≤–µ—Ä—à–∏—Ç—å)",
            r"(?:–ø–æ–∫–∞|–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è)[, ]*–±–æ—Ç"
        ],
        "responses": ["–î–æ –≤—Å—Ç—Ä–µ—á–∏!", "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!", "–ü–æ–∫–∞", "–ü–æ–∫–∞-–ø–æ–∫–∞"],
        "terminate": True
    },
    "help" : {
        "patterns": [r"\b–ø–æ–º–æ—â—å\b", r"\b–∫–æ–º–∞–Ω–¥—ã\b", r"\b—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å\b", r"\b–∫–∞–∫–∏–µ —É —Ç–µ–±—è –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏\b", r"\b—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å\b"],
        "responses": [
            "–Ø –º–æ–≥—É: —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç, –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É, –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç, "
            "–ø–æ—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–º–µ—Ä –∏ —Å–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è. –ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ!",
            "–Ø —É–º–µ—é –Ω–µ–º–Ω–æ–≥–æ: –ø–æ–æ–±—â–∞—Ç—å—Å—è, –ø–æ—Å—á–∏—Ç–∞—Ç—å –∏ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å!"
        ]
    },
    "season": {
        "patterns": [r"–∫–∞–∫–æ–µ —Ç–≤–æ–µ –ª—é–±–∏–º–æ–µ –≤—Ä–µ–º—è –≥–æ–¥–∞", r"–ª—é–±–∏–º–æ–µ –≤—Ä–µ–º—è –≥–æ–¥–∞"],
        "responses": [
            "–Ø –ª—é–±–ª—é –ª–µ—Ç–æ - —Ç–µ–ø–ª–æ, –ø—Ç–∏—á–∫–∏ –ø–æ—é—Ç",
            "–û–±–æ–∂–∞—é –æ—Å–µ–Ω—å! –û—Å–µ–Ω–Ω—è—è –ª–∏—Å—Ç–≤–∞ - —ç—Ç–æ –≤–∑—Ä—ã–≤ —è—Ä–∫–∏—Ö –∫—Ä–∞—Å–æ–∫!",
            "–ú–æ–µ –ª—é–±–∏–º–æ–µ –≤—Ä–µ–º—è –≥–æ–¥–∞ - –∑–∏–º–∞. –ß–µ—Ä–µ–¥–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤, —ç—Ç–æ —Å–µ–º–µ–π–Ω–æ–µ –≤—Ä–µ–º—è."
        ]
    },
    "weather" : {
        "patterns": [
            r"–ø–æ–≥–æ–¥–∞ –≤ ([\w-]+)",
            r"–ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è ([\w-]+)",
            r"–ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ ([\w-]+)"
        ],
        "handler": lambda text: get_weather(analyze_entities(text))
    },
    "calculate" : {
        "patterns": [
            r"–ø–æ—Å—á–∏—Ç–∞—Ç—å (.+)",
            r"—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç (.+)",
            r"–≤—ã—á–∏—Å–ª–∏—Ç—å (.+)",
            r"(?:–≤—ã—á–∏—Å–ª–∏—Ç—å|–ø–æ—Å—á–∏—Ç–∞—Ç—å)\s*([\d+\-*/ ]+)"
        ],
        "handler": lambda expr: calculate(expr)
    },
    "datetime" : {
        "patterns": [r"–¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", r"—Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç–∞", r"–≤—Ä–µ–º—è –∏ –¥–∞—Ç–∞"],
        "handler": lambda: datetime.datetime.now().strftime("–°–µ–π—á–∞—Å %H:%M:%S, %d.%m.%Y")
    },
    "time" : {
        "patterns": [r"–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å", r"—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è", r"—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏", r"^–≤—Ä–µ–º—è$", r"^—á–∞—Å$"],
        "handler": lambda: datetime.datetime.now().strftime("–°–µ–π—á–∞—Å %H:%M:%S")
    },
    "date" : {
        "patterns": [r"–∫–∞–∫–æ–µ —Å–µ–≥–æ–¥–Ω—è —á–∏—Å–ª–æ", r"—Å–∫–∞–∂–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É", r"—Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞", r"^–¥–∞—Ç–∞$", r"^—á–∏—Å–ª–æ$"],
        "handler": lambda: datetime.datetime.now().strftime("–°–µ–≥–æ–¥–Ω—è %d.%m.%Y")
    },
    "day" : {
        "patterns": [r"\b–∫–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏\b", r"\b–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —Å–µ–≥–æ–¥–Ω—è\b", r"\b–∫–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏\b", r"\b–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏\b"],
        "handler": lambda: datetime.datetime.now().strftime("–°–µ–≥–æ–¥–Ω—è %A")
    },
    "joke" : {
        "patterns": [r"–∞–Ω–µ–∫–¥–æ—Ç", r"–ø–æ—à—É—Ç–∏", r"—à—É—Ç–∫–∞", r"—Ä–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É", r"—Ä–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç"],
        "responses": [
            "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã —Ç–∞–∫ –ª—é–±—è—Ç –∑–∏–º—É? –ü–æ—Ç–æ–º—É —á—Ç–æ –∫–æ–¥ –Ω–µ –ª–æ–º–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –∑–∞–º–µ—Ä–∑–∞–µ—Ç! üòÇ",
            "–ö–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É? –û–Ω –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ—Ç –≤—Å–µ –Ω–∞ 0 –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å–ø—Ä–∞–≤–∏–ª–æ—Å—å –ª–∏! ü§ì",
            "–ö–∞–∫–æ–π —á–∞–π –ø—å—ë—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç? –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π. –û–Ω –∂–µ –≤—Å–µ–≥–¥–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ! üçµ",
            "–ß—Ç–æ —Å–∫–∞–∑–∞–ª –æ–¥–∏–Ω –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –¥—Ä—É–≥–æ–º—É? –¢—ã —á—Ç–æ, —Å–æ–≤—Å–µ–º —Å —É–º–∞ —Å–æ—à–µ–ª? –≠—Ç–æ –∂–µ –±–∞–≥, –∞ –Ω–µ —Ñ–∏—á–∞! ü§™",
            "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∏–≥—Ä–∞—é—Ç –≤ –∫–∞—Ä—Ç—ã? –ü–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–∏—Ö –≤—Å–µ–≥–¥–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ! üÉè",
            "–ö–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –æ–∫–Ω–∞? –° –ø–æ–º–æ—â—å—é alt+tab! üòé"
        ]
    },
    "name" : {
        "patterns": [r"–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç", r"—Ç–≤–æ–µ –∏–º—è", r"—Ç—ã –∫—Ç–æ", r"–∫—Ç–æ —Ç—ã"],
        "responses": ["–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫!", "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ë–æ—Ç—Ç–∏", "–Ø —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫"]
    },
    "compliment": {
        "patterns": [r"–º–æ–ª–æ–¥–µ—Ü", r"—É–º–Ω–∏—Ü–∞", r"—Å—É–ø–µ—Ä", r"–∫–ª–∞—Å—Å", r"–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ"],
        "responses": ["–°–ø–∞—Å–∏–±–æ! –¢—ã —Ç–æ–∂–µ —Å—É–ø–µ—Ä!", "–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ!"]
    },
    "mood": {
        "patterns": [
            r"(?:–∫–∞–∫ –¥–µ–ª–æ|–∫–∞–∫ —Ç—ã|–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ|–∫–∞–∫ –∂–∏–∑–Ω—å|–∫–∞–∫ —Å–∞–º|–∫–∞–∫ –ø–æ–∂–∏–≤–∞—Ç—å)",
            r"(?:–∫–∞–∫ —Ç–≤–æ–µ –¥–µ–ª–æ|–∫–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–æ)"
        ],
        "responses": [
            "–í—Å—ë —á—É–¥–µ—Å–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å!",
            "–í—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ê —É —Ç–µ–±—è –∫–∞–∫?",
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –£ –º–µ–Ω—è –≤—Å–µ —Ö–æ—Ä–æ—à–æ!",
            "–ù–µ–ø–ª–æ—Ö–æ, –∞ —É —Ç–µ–±—è –∫–∞–∫?"
        ]
    },
    "thanks": {
        "patterns": [
            r"(?:—Å–ø–∞—Å–∏–±–æ|–±–ª–∞–≥–æ–¥–∞—Ä—é|–º–µ—Ä—Å–∏|–±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤—É—é|–æ—Ç –¥—É—à–∏|—Ç—ã –ª—É—á—à–∏–π)",
            r"(?:–æ–≥—Ä–æ–º–Ω–æ–µ|–±–æ–ª—å—à–æ–µ)[ ]*(?:—Å–ø–∞—Å–∏–±–æ|–±–ª–∞–≥–æ–¥–∞—Ä—é)"
        ],
        "responses": [
            "–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä",
            "–†–∞–¥ –ø–æ–º–æ—á—å! –û–±—Ä–∞—â–∞–π—Å—è –µ—â—ë!",
            "–ù–µ —Å—Ç–æ–∏—Ç –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏! üòâ"
        ]
    },
    "search": {
        "patterns": [r"–ø–æ–∏—Å–∫ (.+)", r"–Ω–∞–π–¥–∏ (.+)"],
        "handler": lambda query: search_web(query)
    },
    "quote": {
        "patterns": [r"—Ü–∏—Ç–∞—Ç–∞", r"–º—É–¥—Ä–æ—Å—Ç—å"],
        "responses": [
            "–ú—ã ‚Äî —ç—Ç–æ —Ç–æ, —á—Ç–æ –º—ã –¥–µ–ª–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ. ‚Äî –ê—Ä–∏—Å—Ç–æ—Ç–µ–ª—å",
            "–õ—É—á—à–∏–π —Å–ø–æ—Å–æ–± –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –±—É–¥—É—â–µ–µ ‚Äî —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ. ‚Äî –ê–≤—Ä–∞–∞–º –õ–∏–Ω–∫–æ–ª—å–Ω"
        ]
    },
    "advice": {
        "patterns": [r"—Å–æ–≤–µ—Ç", r"—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"],
        "responses": [
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–µ–≥–æ–¥–Ω—è —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ!",
            "–°–æ–≤–µ—Ç –¥–Ω—è: –ø–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã."
        ]
    },
    "unknown" : {
        "patterns": [r".*"],
        "responses": [
            "–ê–∞–∞... –ú–æ–∂–µ—à—å —É—Ç–æ—á–Ω–∏—Ç—å?",
            "–Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª —Ç–µ–±—è. –ü–æ–ø—Ä–æ–±—É–π —Å–∫–∞–∑–∞—Ç—å –∏–Ω–∞—á–µ.",
            lambda x: f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {x}" if random.random() < 0.3 else "–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª, –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?"
        ]
    }
}

# –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
def translate_text(text, dest_language="ru"):
    try:
        translated = translator.translate(text, dest=dest_language)
        return translated.text
    except Exception as e:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏(. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞"

# –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é TextBlob
def analyze_tone_textblob(text):
    try:
        translated_text = translate_text(text, "en")
        blob = TextBlob(translated_text)
        polarity = blob.sentiment.polarity
        if polarity > 0:
            return random.choice([
                "–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –≤ —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏! ",
                "–û, –∫–∞–∫ –∑–¥–æ—Ä–æ–≤–æ! üòä ",
                "–†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ —Ö–æ—Ä–æ—à–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –¥—É—Ö–∞! üåü "
            ])
        elif polarity < 0:
            return random.choice([
                "–ú–Ω–µ –∂–∞–ª—å, —á—Ç–æ —Ç—ã —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω(–∞). üòî ",
                "–ö–∞–∂–µ—Ç—Å—è, —Ç—ã —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω(–∞). –Ø —Ç—É—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ. ",
                "–ö—Ç–æ-—Ç–æ –Ω–µ –≤ –ª—É—á—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏... –ù–∞–¥–µ—é—Å—å, —è —Å–º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å! üíô "
            ])
        else:
            return ""
    except Exception as e:
        return "–°–ª–æ–∂–Ω–æ —Å–µ–π—á–∞—Å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –ù–æ —è –∑–¥–µ—Å—å, –µ—Å–ª–∏ —á—Ç–æ. "

# –ê–Ω–∞–ª–∏–∑ —Å—É—â–Ω–æ—Å—Ç–µ–π —Å –ø–æ–º–æ—â—å—é spaCy
def analyze_entities(text):
    doc = nlp(text)
    for ent in doc.ents:
        if ent.label_ == "LOC" or ent.label_ == "GPE":
            return ent.text
    return text

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–π
def calculate(expression):
    try:
        expression = expression.replace(" ", "")
        if not re.fullmatch(r"[\d+\-*/.()]+", expression):
            return "–ß—Ç–æ-—Ç–æ –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ."
        result = eval(expression)
        return f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}"
    except ZeroDivisionError:
        return "–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –ø—ã—Ç–∞–µ—à—å—Å—è –¥–µ–ª–∏—Ç—å –Ω–∞ –Ω–æ–ª—å! –Ø —Ç–∞–∫ –Ω–µ —É–º–µ—é."
    except Exception:
        return "–ß—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å."

# –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
def search_web(query):
    url = f"https://www.google.com/search?q={query.replace(' ','+')}"
    webbrowser.open(url)
    return random.choice([
        f"–ò—â—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ: {query}",
        f"–ó–∞–ø—Ä–æ—Å: {query} –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É",
        f"–ò–¥–µ—Ç –ø–æ–∏—Å–∫: {query}"
    ])

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
def get_weather(city):
    url_w = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric&lang=ru"
    try:
        response = requests.get(url_w)
        if response.status_code == 200:
            data = response.json()
            temp = data["main"]["temp"]
            weather_desc = data["weather"][0]["description"]
            return f"–í –≥–æ—Ä–æ–¥–µ {city.title()} —Å–µ–π—á–∞—Å {weather_desc} –ø—Ä–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ {temp} C."
        else:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ."
    except Exception:
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã."

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞
def chatbot_response(text):
    original_text = text.lower().strip()
    tone_response = analyze_tone_textblob(text)
    lemmatized_text = lemmatize_text(text.lower().strip())

    for intent_name, intent_data in INTENTS.items():
        for pattern in intent_data["patterns"]:
            match = re.search(pattern, original_text, re.IGNORECASE) if intent_name in ["echo", "greeting", "day", "thanks", "translate"] else re.search(pattern, lemmatized_text, re.IGNORECASE)
            if match:
                if "handler" in intent_data:
                    groups = match.groups()
                    response = intent_data["handler"](groups[0]) if groups else intent_data["handler"]()
                else:
                    chosen = random.choice(intent_data["responses"])
                    response = chosen(text) if callable(chosen) else chosen
                    #response = random.choice(intent_data["responses"])

                return f"{tone_response}{response}" if tone_response else response
    chosen = random.choice(INTENTS['unknown']['responses'])
    return f"{tone_response}{chosen(text) if callable(chosen) else chosen}" if tone_response else chosen(text) if callable(chosen) else chosen

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã
if __name__ == "__main__":
    with open("chat_log.txt", "w", encoding="utf-8") as log_file:
        log_file.write("=" * 50 + "\n")

    print("–í–≤–µ–¥–∏—Ç–µ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞.")
    while True:
        user_input = input("–í—ã: ")
        if user_input.lower() == "–≤—ã—Ö–æ–¥" or user_input.lower() == "–ø–æ–∫–∞" or user_input.lower() == "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è":
            farewell = random.choice(INTENTS["goodbye"]["responses"])
            print("–ë–æ—Ç:", farewell)
            log_interaction(user_input, farewell)
            break

        bot_reply = chatbot_response(user_input)
        print("–ë–æ—Ç:", bot_reply)
        log_interaction(user_input, bot_reply)