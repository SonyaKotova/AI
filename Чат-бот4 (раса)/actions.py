from typing import Any, Text, Dict, List
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import SlotSet
from datetime import datetime
from textblob import TextBlob
import requests
import re
import logging
import math
from googletrans import Translator
import webbrowser
import urllib.parse

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
translator = Translator()

class ActionTranslate(Action):
    """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"""

    def name(self) -> Text:
        return "action_translate"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        text_to_translate = tracker.get_slot("text")

        if not text_to_translate:
            dispatcher.utter_message(text="–ù–µ –Ω–∞—à—ë–ª —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return []

        try:
            result = translator.translate(text_to_translate, dest='en').text
            msg = f"–ü–µ—Ä–µ–≤–æ–¥: {result}"
        except Exception as e:
            msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥"

        dispatcher.utter_message(text=msg)
        return []


class ActionCalculate(Action):
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π"""

    def name(self) -> Text:
        return "action_calculate"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        expression = tracker.get_slot("expression")
        expression = expression.replace(" ", "").lower()

        # –ó–∞–º–µ–Ω–∞ —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        expression = expression.replace('—Ö', 'x').replace('√∑', '/')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if not re.match(r'^[\d+\-*/().,x^]+$', expression):
            dispatcher.utter_message(text="–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏")
            return []

        try:
            # –ó–∞–º–µ–Ω–∞ ^ –Ω–∞ ** –¥–ª—è Python
            expression = expression.replace('^', '**')
            result = eval(expression)
            msg = f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {round(result, 3)}"
        except ZeroDivisionError:
            msg = "–û—à–∏–±–∫–∞: –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å"
        except Exception as e:
            msg = "–ù–µ –º–æ–≥—É –≤—ã—á–∏—Å–ª–∏—Ç—å —ç—Ç–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"

        dispatcher.utter_message(text=msg)
        return []

class ActionDatetime(Action):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""

    def name(self) -> Text:
        return "action_datetime"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        now = datetime.now()
        response = now.strftime("–°–µ–π—á–∞—Å %H:%M:%S, %d.%m.%Y")
        dispatcher.utter_message(text=response)
        return []


class ActionSearch(Action):
    """–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ"""

    def name(self) -> Text:
        return "action_search"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        query = tracker.get_slot("query")
        webbrowser.open(f"https://www.google.com/search?q={query}")
        dispatcher.utter_message(text=f"–ò—â—É: {query}")
        return []

class ActionAnalyzeSentiment(Action):
    """–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""

    def name(self) -> Text:
        return "action_analyze_sentiment"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        text = tracker.latest_message.get('text')

        if not text or len(text.strip()) < 3:
            dispatcher.utter_message(text="–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return []

        try:
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            translated = translator.translate(text, dest='en').text
            analysis = TextBlob(translated)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–Ω –∏ —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            polarity = analysis.sentiment.polarity  # -1 to 1 (negative to positive)
            subjectivity = analysis.sentiment.subjectivity  # 0 to 1 (objective to subjective)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
            if polarity > 0.3:
                if subjectivity > 0.6:
                    msg = "–í—ã –≤—ã–≥–ª—è–¥–∏—Ç–µ –æ—á–µ–Ω—å —Å—á–∞—Å—Ç–ª–∏–≤—ã–º! üòä –ß—Ç–æ –≤–∞—Å —Ç–∞–∫ —Ä–∞–¥—É–µ—Ç?"
                else:
                    msg = "–ß—É–≤—Å—Ç–≤—É–µ—Ç—Å—è –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π! üëç"
            elif polarity < -0.3:
                if subjectivity > 0.6:
                    msg = "–ö–∞–∂–µ—Ç—Å—è, –≤—ã —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω—ã. –•–æ—Ç–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ–± —ç—Ç–æ–º? üíô"
                else:
                    msg = "–ß—É–≤—Å—Ç–≤—É–µ—Ç—Å—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Ç–æ–Ω. –ú–æ–≥—É —è —á–µ–º-—Ç–æ –ø–æ–º–æ—á—å? ü§ó"
            else:
                if subjectivity > 0.6:
                    msg = "–í—ã –≤—ã–≥–ª—è–¥–∏—Ç–µ —Å–ø–æ–∫–æ–π–Ω—ã–º. –ö–∞–∫ –≤–∞—à–∏ –¥–µ–ª–∞? üòå"
                else:
                    msg = "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?"

            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π
            dispatcher.utter_message(text=msg)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ—Ç —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
            mood = "positive" if polarity > 0.3 else ("negative" if polarity < -0.3 else "neutral")
            return [SlotSet("user_mood", mood)]

        except Exception as e:
            logger.error(f"Sentiment analysis error: {str(e)}")
            dispatcher.utter_message(text="–Ø –≤–∞—Å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞—é!")
            return []

class WeatherService:
    API_KEY = "f62350d6ff8c087ec53d1479dab00ade"

    @staticmethod
    def normalize_city_name(city: str) -> str:
        """
        –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —É–¥–∞–ª—è—è –ø—Ä–µ–¥–ª–æ–≥–∏ –∏ –ø—Ä–∏–≤–æ–¥—è –∫ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º—É –ø–∞–¥–µ–∂—É
        –ü—Ä–∏–º–µ—Ä—ã:
        - "–≤ –ú–æ—Å–∫–≤–µ" -> "–ú–æ—Å–∫–≤–∞"
        - "–¥–ª—è –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞" -> "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
        - "–ø–æ –†–æ—Å—Ç–æ–≤—É-–Ω–∞-–î–æ–Ω—É" -> "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É"
        """
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–≥–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        city = re.sub(r'^[–≤–¥–ª—è–ø–æ]\s+', '', city.strip(), flags=re.IGNORECASE)

        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        city = city.lower()

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–∞–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è (—á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å)
        if '-' in city:
            parts = city.split('-')
            city = '-'.join([WeatherService.normalize_part(part) for part in parts])
        else:
            city = WeatherService.normalize_part(city)

        return city.capitalize()

    @staticmethod
    def normalize_part(part: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞"""
        # –£–¥–∞–ª—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –ø–∞–¥–µ–∂–µ–π
        endings = [
            (r'–æ–º$', ''),  # "–æ–º" -> ""
            (r'–µ$', '–∞'),  # "–µ" -> "–∞"
            (r'–∏$', '—å'),  # "–∏" -> "—å"
            (r'—É$', ''),  # "—É" -> ""
            (r'–æ–π$', '–∞'),  # "–æ–π" -> "–∞"
            (r'–æ–º$', ''),  # "–æ–º" -> ""
            (r'—ã$', '–∞'),  # "—ã" -> "–∞"
            (r'–∞—Ö$', '–∞'),  # "–∞—Ö" -> "–∞"
            (r'—è–º$', '—è'),  # "—è–º" -> "—è"
            (r'–≥–æ—Ä–æ–¥–µ$', '–≥–æ—Ä–æ–¥'),  # "–≥–æ—Ä–æ–¥–µ" -> "–≥–æ—Ä–æ–¥"
            (r'–≥—Ä–∞–¥–µ$', '–≥—Ä–∞–¥'),  # "–≥—Ä–∞–¥–µ" -> "–≥—Ä–∞–¥"
            (r'—Å–∫–µ$', '—Å–∫'),  # "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–µ" -> "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"
            (r'—Ü–µ$', '–∫'),  # "–ü–µ–Ω–∑–µ" -> "–ü–µ–Ω–∑–∞" (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø—Ä–∞–≤–∏–ª–æ–º)
            (r'—å$', '—å')  # –æ—Å—Ç–∞–≤–ª—è–µ–º "—å" –Ω–∞ –∫–æ–Ω—Ü–µ
        ]

        for pattern, repl in endings:
            if re.search(pattern, part):
                part = re.sub(pattern, repl, part)
                break

        return part

    @classmethod
    def get_weather(cls, city: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ —á–µ—Ä–µ–∑ API"""
        normalized_city = cls.normalize_city_name(city)
        encoded_city = urllib.parse.quote_plus(normalized_city)
        url = f"http://api.openweathermap.org/data/2.5/weather?q={encoded_city}&appid={cls.API_KEY}&units=metric&lang=ru"

        logger.info(f"Requesting weather for: {city} (normalized: {normalized_city})")
        response = requests.get(url, timeout=5)

        if response.status_code == 404:
            raise ValueError(f"–ì–æ—Ä–æ–¥ '{normalized_city}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        response.raise_for_status()

        return response.json()

logger = logging.getLogger(__name__)

class ActionWeather(Action):
    def name(self) -> Text:
        return "action_weather"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        try:
            # 1. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
            city = next(
                (e["value"] for e in tracker.latest_message.get("entities", [])
                if e.get("entity") in ["city", "LOC"]),
                None
            )

            if not city:
                city = tracker.get_slot("city")

            if not city:
                dispatcher.utter_message(text="–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ'")
                return []

            # 2. –ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã
            data = WeatherService.get_weather(city)

            # 3. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            response = (
                f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {data['name']}:\n"
                f"‚Ä¢ {data['weather'][0]['description'].capitalize()}\n"
                f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['main']['temp']:.1f}¬∞C\n"
                f"‚Ä¢ –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {data['main']['feels_like']:.1f}¬∞C\n"
                f"‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {data['main']['humidity']}%"
            )

            dispatcher.utter_message(text=response)
            return [SlotSet("city", data['name'])]

        except ValueError as e:
            dispatcher.utter_message(text=str(e))
        except Exception as e:
            logger.error(f"Unexpected error: {str(e)}")
            dispatcher.utter_message(text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ")

        return []